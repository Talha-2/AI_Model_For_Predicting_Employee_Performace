# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I3e1laYeb6IE5_2T8X6sVEVZ5SzI2kWn
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

df = pd.read_csv('employee_data1.csv')

df.head()

df.info()

df.describe()

df.columns

# Exploratory Data Analysis (EDA)
missing_values = df.isna().sum()
missing_values

# Visualize the distribution of the target variable
plt.figure(figsize=(10, 5))
sns.histplot(data=df['Current Employee Rating'], kde=False)
plt.title('Distribution of Current Employee Rating')
plt.show()

# Visualize distributions of numeric features
df.hist(bins=30, figsize=(20, 15))
plt.suptitle('Distributions of Numeric Features')
plt.show()

# Correlations
numeric_data = df.select_dtypes(include=['int64', 'float64'])
corr_matrix = numeric_data.corr()
plt.figure(figsize=(12, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix of Numeric Features')
plt.show()

corr_with_target = corr_matrix['Current Employee Rating'].sort_values(ascending=False)
print(corr_with_target)

# Data Preparation / Preprocessing
if 'Performance Score' in df.columns:
    le = LabelEncoder()
    df['Performance Score'] = le.fit_transform(df['Performance Score'])

numeric_columns = df.select_dtypes(include=['int64', 'float64']).columns.tolist()

# Impute missing values with the mean for numeric columns
imputer = SimpleImputer(strategy='mean')
df[numeric_columns] = imputer.fit_transform(df[numeric_columns])

X = df[numeric_columns].drop(columns='Current Employee Rating')
y = df['Performance Score']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.32, random_state=42)

from sklearn.linear_model import LinearRegression
# Train the Linear Regression Model
linear_regressor = LinearRegression()
linear_regressor.fit(X_train, y_train)

y_pred = linear_regressor.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Linear Regression - MSE: {mse}, MAE: {mae}, R2: {r2}')

